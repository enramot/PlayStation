#!/usr/bin/env pike

import Public.Poppa.Options;

private array(string) code_container = ({});
private Syntaxer.Hilite highlighter;
private string base = dirname(__FILE__);
private string cwd  = getcwd();
private mapping(string:Syntaxer.Hilite) hiliters  = ([]);

#define TRIM(S) String.trim_all_whites((S))

int main(int argc, array(string) argv)
{
  Context opts = Context("file.html", 1);

  opts->add_argument(({
    ({ "init",  "i", OPTIONAL_ARG, TYPE_NONE, "Initialize a new module" }),
    ({ "regen", "r", OPTIONAL_ARG, TYPE_NONE, "Regenerate module" })
  }));

  if (mixed e = catch (opts->parse(argv))) {
    werror("%s\n", describe_error(e));
    opts->usage();
  }

  argv -= ({ 0 });

  if (sizeof(argv) < 2) {
    werror("Missing required arguments!\n\n%s\n", opts->usage(1));
    return 1;
  }
  
  string file = argv[1];

  if ( opts["init"] ) {
    werror("INIT\n");
    return 0;
  }

  if (!Stdio.exist(file)) {
    werror("Input file %O doesn't exist!\n", file);
    return 1;
  }

  string path = getcwd();

  highlighter = Syntaxer.get_parser("js");
  highlighter->line_wrap = ({ "", "<br/>\n" });

  String.Buffer buf = String.Buffer();
  function add = buf->add;

  Parser.HTML parser = Parser.HTML();

  /*
  parser->add_container("script",
    lambda (Parser.HTML p, mapping attr, string content) {
      if (attr->src && !has_prefix(attr->src, "http://") && 
      	 !has_prefix(attr->src, "https"))
      {
     	string src = combine_path(path, attr->src);
      	parse_script(src);
      }
      add(p->current());
      return ({});
    }
  );
  */

  parser->add_container("code", 
    lambda (Parser.HTML p, mapping attr, string content) {
      array(string) lines = (content-"\r")/"\n";

      if (!attr->lang) {
      	add(content);
      	return 0;
      }
      
      if (sizeof(lines) > 1) {
      	sscanf (lines[1], "%[ \t]%*s", string prefix);
	if (prefix && sizeof(prefix)) {      	
	  Regexp.SimpleRegexp re = Regexp.SimpleRegexp("^" + prefix);

	  for (int i; i < sizeof(lines); i++)
	    lines[i] = re->replace(lines[i], "");
  
	  if (TRIM( lines[0] ) == "")
	    lines = lines[1..];
	  
	  if (TRIM( lines[-1] ) == "")
	    lines = lines[..sizeof(lines)-2];

	  content = lines*"\n";
	}
      }

      Syntaxer.Hilite hl = Syntaxer.Hilite(attr->lang);
      hl->line_wrap = ({ "", "<br/>\n" });

      if (hl) content = hl->parse(content);
      
      m_delete(attr, "lang");
      m_delete(attr, "detab");
      
      if ( attr["class"] ) 
	attr["class"] += " hilite";
      else
      	attr["class"] = "hilite";

      add(mk_container("code", attr, content));
      
      return 0;
    }
  );
  
  parser->add_container("example",
    lambda (Parser.HTML, mapping attr, string content) {
      string extra = "<code class='hilite'>" + hilite(content, "html") + "</code>";
      return content + extra;
    }
  );

  /*
  int(0..1) add_content = 1;
  int captures = 0;

  parser->_set_tag_callback(
    lambda (Parser.HTML p, string tag) {
      if (!add_content && tag == "</div>")
      	add_content = 1;

      if (p->tag_name() == "div") {
      	add(p->current());
      	if (p->tag_args()["class"] == "code") {
      	  if (has_index(code_container, captures)) {
	    add_content = 0;
	    add("<p><strong>JavaScript:</strong></p>");
      	    add("<code>");
      	    add( code_container[captures] );
      	    add("</code>");
      	    captures++;
      	  }
      	}
      }
      else if (add_content)
      	add(p->current());
    }
  );

  parser->_set_data_callback(
    lambda (Parser.HTML p, string content) {
      if (add_content)
	add(content);
    }
  );
  */

  mixed e = catch {
    string s = parser->feed(Stdio.read_file(file), 1)->finish()->read();
    Stdio.write_file("_" + file, s);
  };
  
  if (e) {
    werror("An error occured: %s\n", describe_error(e));
    return 1;
  }


  return 0;
}

private void parse_script(string path)
{
  Parser.HTML parser = Parser.HTML();
  parser->add_container("capture",
    lambda (Parser.HTML p, mapping attr, string contents) {
      contents = String.trim_all_whites(contents);
      array(string) lines = ({});
      foreach (contents/"\n", string line) {
      	if (has_prefix(line, "  "))
      	  line = line[2..];

      	if (String.trim_all_whites(line) == "//")
      	  continue;

      	lines += ({ line });
      }

      contents = highlighter->parse(lines*"\n");
      code_container += ({ contents });
    }
  );

  parser->feed(Stdio.read_file(path))->finish();
}

string hilite(string s, string lang)
{
  Syntaxer.Hilite hl = Syntaxer.get_parser(lang);
  hl->line_wrap = ({ "", "<br/>\n" });

  if (hl) s = hl->parse(detab(s));

  return s;
}

string detab(string s)
{
  if (!s) return "";
  
  array(string) lines = (s-"\r")/"\n";
  
  if (sizeof(lines) > 1) {
    sscanf (lines[1], "%[ \t]%*s", string prefix);
    if (prefix && sizeof(prefix)) {      	
      Regexp.SimpleRegexp re = Regexp.SimpleRegexp("^" + prefix);

      for (int i; i < sizeof(lines); i++)
	lines[i] = re->replace(lines[i], "");

      if (TRIM( lines[0] ) == "")
	lines = lines[1..];
      
      if (TRIM( lines[-1] ) == "")
	lines = lines[..sizeof(lines)-2];

      s = lines*"\n";
    }
  }

  return s;
}

string mk_container(string name, mapping attr, string content)
{
  return sprintf("<%s%s>%s</%[0]s>", name, mk_attr(attr), content);
}

string mk_attr(mapping attr) 
{
  if (!sizeof(attr)) return "";
  return sprintf(" %{%s='%s'%}", (array)attr);
}
